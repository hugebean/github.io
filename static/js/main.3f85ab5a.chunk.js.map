{"version":3,"sources":["webcam.js","App.js","serviceWorker.js","index.js"],"names":["Camera","props","success","stream","video","refs","cam","srcObject","play","error","err","onError","console","log","capture","canvas","getContext","drawImage","toDataURL","width","height","front","navigator","mediaDevices","getUserMedia","audio","ideal","facingMode","then","catch","this","btnColor","focusWidth","focusHeight","className","id","autoPlay","playsInline","ref","showFocus","style","borderColor","display","Component","imgSrc","test","window","location","protocol","App","useRef","onClick","img","current","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"uOA+FeA,G,kBA1Fb,WAAYC,GAAQ,IAAD,uBACjB,4CAAMA,KAgBRC,QAAU,SAAAC,GACR,IAAMC,EAAQ,EAAKC,KAAKC,IACxBF,EAAMG,UAAYJ,EAClBC,EAAMI,QApBW,EAuBnBC,MAAQ,SAAAC,GAAQ,IACNC,EAAY,EAAKV,MAAjBU,QAEJA,EACFA,EAAQD,GAERE,QAAQC,IAAIH,IA7BG,EAiCnBI,QAAU,WAAO,IACPA,EAAY,EAAKb,MAAjBa,QACFC,EAAS,EAAKV,KAAKU,OACnBX,EAAQ,EAAKC,KAAKC,IACRS,EAAOC,WAAW,MAC1BC,UAAUb,EAAO,EAAG,GAC5BU,EAAQC,EAAOG,UAAU,gBAvCR,MAGgB,EAAKjB,MAA9BkB,EAHS,EAGTA,MAAOC,EAHE,EAGFA,OAAQC,EAHN,EAGMA,MAHN,OAIjBC,UAAUC,aACPC,aAAa,CACZC,OAAO,EACPrB,MAAO,CACLe,MAAO,CAAEO,MAAOP,GAChBC,OAAQ,CAAEM,MAAON,GACjBO,WAAYN,EAAQ,OAAS,iBAGhCO,KAAK,EAAK1B,SACV2B,MAAM,EAAKpB,OAdG,E,sEA2CjB,IADO,EAEsDqB,KAAK7B,MAA1D8B,EAFD,EAECA,SAAUZ,EAFX,EAEWA,MAAOC,EAFlB,EAEkBA,OAAQY,EAF1B,EAE0BA,WAAYC,EAFtC,EAEsCA,YAE7C,OACE,yBAAKC,UAAU,oBACb,2BACEC,GAAG,QACHhB,MAAOA,EACPC,OAAQA,EACRgB,UAAQ,EACRC,aAAW,EACXC,IAAI,QAELR,KAAK7B,MAAMsC,UACV,yBACEL,UAAU,eACVM,MAAO,CACLC,YAAaV,GAjBF,UAkBXZ,MAAOa,GAAc,MACrBZ,OAAQa,GAAe,SAGzB,KACJ,4BACEE,GAAG,SACHhB,MAAOA,EACPC,OAAQA,EACRkB,IAAI,SACJE,MAAO,CAAEE,QAAS,e,GAxEPC,cCCrB,SAAS7B,EAAQ8B,GACfhC,QAAQC,IAAI+B,GAFR,QAAQC,KAAKC,OAAOC,SAASC,YAAWF,OAAOC,SAASC,SAAW,YAKzE,IAoBeC,EApBH,WACV,IAAM3C,EAAM4C,iBAAO,MACnB,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,CACEX,WAAW,EACXlB,OAAO,EACPP,QAASA,EACTwB,IAAKhC,EACLa,MAAM,MACNC,OAAO,OACPY,WAAW,MACXC,YAAY,MACZF,SAAS,UAEX,4BAAQoB,QAAS,SAAAC,GAAG,OAAI9C,EAAI+C,QAAQvC,QAAQsC,KAA5C,gBCZcE,QACW,cAA7BR,OAAOC,SAASQ,UAEe,UAA7BT,OAAOC,SAASQ,UAEhBT,OAAOC,SAASQ,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBtC,WACrBA,UAAUuC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,iB","file":"static/js/main.3f85ab5a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './webcam.css';\n\nclass Camera extends Component {\n  constructor(props) {\n    super(props);\n\n    const { width, height, front } = this.props;\n    navigator.mediaDevices\n      .getUserMedia({\n        audio: false,\n        video: {\n          width: { ideal: width },\n          height: { ideal: height },\n          facingMode: front ? 'user' : 'environment',\n        },\n      })\n      .then(this.success)\n      .catch(this.error);\n  }\n\n  success = stream => {\n    const video = this.refs.cam;\n    video.srcObject = stream;\n    video.play();\n  };\n\n  error = err => {\n    const { onError } = this.props;\n\n    if (onError) {\n      onError(err);\n    } else {\n      console.log(err);\n    }\n  };\n\n  capture = () => {\n    const { capture } = this.props;\n    const canvas = this.refs.canvas;\n    const video = this.refs.cam;\n    const context = canvas.getContext('2d');\n    context.drawImage(video, 0, 0);\n    capture(canvas.toDataURL('image/jpeg'));\n  };\n\n  render() {\n    const defaultColor = '#2acef5';\n    const { btnColor, width, height, focusWidth, focusHeight } = this.props;\n\n    return (\n      <div className=\"camera-container\">\n        <video\n          id=\"video\"\n          width={width}\n          height={height}\n          autoPlay\n          playsInline\n          ref=\"cam\"\n        />\n        {this.props.showFocus ? (\n          <div\n            className=\"camera-focus\"\n            style={{\n              borderColor: btnColor || defaultColor,\n              width: focusWidth || '80%',\n              height: focusHeight || '50%',\n            }}\n          />\n        ) : null}\n        <canvas\n          id=\"canvas\"\n          width={width}\n          height={height}\n          ref=\"canvas\"\n          style={{ display: 'none' }}\n        />\n      </div>\n    );\n  }\n}\n\nCamera.propTypes = {\n  front: PropTypes.bool,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  capture: PropTypes.func.isRequired,\n  showFocus: PropTypes.bool,\n  btnColor: PropTypes.string,\n  focusWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  focusHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  onError: PropTypes.func,\n};\n\nexport default Camera;","\nimport React, { Fragment, useRef } from 'react';\n// import ReactDOM from 'react-dom';\nimport Webcam from './webcam';\n if (!/https/.test(window.location.protocol)) window.location.protocol = 'https://';\nfunction capture(imgSrc) {\n  console.log(imgSrc);\n}\n\nconst App = () => {\n  const cam = useRef(null);\n  return (\n    <Fragment>\n      <Webcam\n        showFocus={true}\n        front={true}\n        capture={capture}\n        ref={cam}\n        width=\"80%\"\n        height=\"auto\"\n        focusWidth=\"80%\"\n        focusHeight=\"60%\"\n        btnColor=\"white\"\n      />\n      <button onClick={img => cam.current.capture(img)}>Take image</button>\n    </Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}